import json
import os
import time

'''
–§—É–Ω–∫—Ü—ñ—è	–î—ñ—è
json.dump(obj, file)	–∑–∞–ø–∏—Å—É—î Python-–æ–±‚Äô—î–∫—Ç —É JSON-—Ñ–∞–π–ª
json.load(file)	—á–∏—Ç–∞—î JSON-—Ñ–∞–π–ª —ñ –ø–æ–≤–µ—Ä—Ç–∞—î Python-–æ–±‚Äô—î–∫—Ç
json.dumps(obj)	–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î Python-–æ–±‚Äô—î–∫—Ç —É JSON-—Ä—è–¥–æ–∫
json.loads(str)	–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î JSON-—Ä—è–¥–æ–∫ —É Python-–æ–±‚Äô—î–∫—Ç

–û—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏
–†–µ–∂–∏–º	–ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞	–©–æ —Ä–æ–±–∏—Ç—å
'r'	read	üîπ –í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è. –§–∞–π–ª –º–∞—î –≤–∂–µ —ñ—Å–Ω—É–≤–∞—Ç–∏.
'w'	write	üîπ –í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å—É. –Ø–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î ‚Äî —É—Å–µ –≤ –Ω—å–æ–º—É —Å—Ç–∏—Ä–∞—î—Ç—å—Å—è! –Ø–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–∏–π —Ñ–∞–π–ª.
'a'	append	üîπ –í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–æ–¥–∞—î—Ç—å—Å—è –≤ –∫—ñ–Ω–µ—Ü—å, –Ω—ñ—á–æ–≥–æ –Ω–µ —Å—Ç–∏—Ä–∞—î—Ç—å—Å—è).
'x'	exclusive creation	üîπ –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ñ–∞–π–ª, —è–∫—â–æ —Ç–∞–∫–æ–≥–æ —â–µ –Ω–µ–º–∞—î. –Ø–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î ‚Äî –±—É–¥–µ –ø–æ–º–∏–ª–∫–∞.


'''

def main_menu() -> None:
    print('–ü—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–¥–∞—á–∞–º–∏. –î–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É —Ñ–∞–π–ª—ñ data.json')
    print('–ö–æ–º–∞–Ω–¥–∏:')
    print("add              –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("rm <id>          –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("complete <id>    –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–º")
    print("revert <id>      –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
    print("edit <id>        –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("ls               –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("filter <category>–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
    print("help             –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é")



def write_file(tasks: list) -> None:
    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)


def read_file() -> list:
    if os.path.exists("data.json"):
        with open("data.json", "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return []


def show_tasks(tasks: list | None = None) -> None:
    if tasks is None:
        tasks = read_file()

    print(f"\n{'ID':<12}{'–ó–∞–≤–¥–∞–Ω–Ω—è':<30}{'–ö–∞—Ç–µ–≥–æ—Ä—ñ—è':<15}{'–°—Ç–∞—Ç—É—Å'}")
    print("-" * 70)

    if tasks:
        for task in tasks:
            print(f"{task['id']:<12}{task['text']:<30}{task.get('category', '-'):<15}{task['status']}")
    else:
        print('–ó–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "add", —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ.')


def add_task() -> None:
    tasks = read_file()

    text = input('–í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è: ')
    category = input('–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (—Ä–æ–±–æ—Ç–∞, –Ω–∞–≤—á–∞–Ω–Ω—è, –¥—ñ–º, –æ—Å–æ–±–∏—Å—Ç–µ...): ').strip().lower()

    task = {
        'text': text,
        'id': str(int(time.time())),
        'status': '–ù–æ–≤–∞',
        'category': category if category else '–∑–∞–≥–∞–ª—å–Ω–∞',
    }

    tasks.append(task)
    write_file(tasks)
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: {task['id']})")


def rm_task(id: str):
    tasks = read_file()
    new_task_list = [t for t in tasks if t['id'] != id]

    if len(new_task_list) != len(tasks):
        write_file(new_task_list)
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è ID {id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è –∑ ID {id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


def get_task_by_id(id: str):
    tasks = read_file()
    return next((t for t in tasks if t['id'] == id), None)


def update_task(task_to_update: dict[str, str]) -> None:
    tasks = read_file()
    updated = [task_to_update if t['id'] == task_to_update['id'] else t for t in tasks]
    write_file(updated)


def update_task_status(id: str, status: str) -> None:
    task = get_task_by_id(id)
    if task:
        task['status'] = status
        update_task(task)
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è ID {id} ‚Üí —Å—Ç–∞—Ç—É—Å '{status}'")
    else:
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è ID {id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


def edit_task(id: str):
    task = get_task_by_id(id)
    if not task:
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è ID {id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = input(f" –ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç (–ø–æ—Ç–æ—á–Ω–∏–π: {task['text']}): ") or task['text']
    category = input(f"–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–ø–æ—Ç–æ—á–Ω–∞: {task.get('category', '-')}) : ") or task.get('category', '–∑–∞–≥–∞–ª—å–Ω–∞')

    task['text'] = text
    task['category'] = category
    update_task(task)

    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è ID {id} –æ–Ω–æ–≤–ª–µ–Ω–æ.")


def filter_by_category(category: str):
    tasks = read_file()
    filtered = [t for t in tasks if t.get('category', '').lower() == category.lower()]

    if filtered:
        print(f"\n–ó–∞–≤–¥–∞–Ω–Ω—è —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}':")
        show_tasks(filtered)
    else:
        print(f"–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'.")


def main():
    main_menu()
    while True:
        parts = input('\n–ö–æ–º–∞–Ω–¥–∞: ').split(' ', 1)
        command, *args = parts

        if command == 'ls':
            show_tasks()
        elif command == 'add':
            add_task()
        elif command == 'rm':
            rm_task(args[0] if args else '')
        elif command == 'complete':
            update_task_status(args[0], '–í–∏–∫–æ–Ω–∞–Ω–∞')
        elif command == 'revert':
            update_task_status(args[0], '–ù–æ–≤–∞')
        elif command == 'edit':
            edit_task(args[0])
        elif command == 'filter':
            if args:
                filter_by_category(args[0])
            else:
                print("–í–∫–∞–∂—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏: filter <category>")
        elif command == 'help':
            main_menu()
        else:
            print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å 'help'.")


if __name__ == '__main__':
    main()
