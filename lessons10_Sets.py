# Множина (set)
'''

{1, 2, 3} set залишає унікальні значення
множина невпорядкована колекція
'''
#1. Створення множини

empty_set = set() # створення порожньої множини
numbers = {10, 25, 3, 4, 3, 45, 56, 20, 34, 456, 4566} # створення множини
print(numbers)

#2. Робота з індексами
# працювати з індексами неможливо, бо їх у множини не існує


#3. Методи множин
# nums.copy() = numbers.copy() аналогічний копи
#numbtrs.clear() очищає множину

numbers.add(150) # додає новий елемент до множини
print(numbers)

numbers.remove(150)  #видаляє по значенню
print(numbers)

numbers.discard(10) #видаляє по значенню
print(numbers)
'''
my_set = {1, 2, 3}

# Використання remove()
my_set.remove(2) # my_set тепер {1, 3}
# my_set.remove(4) # Це викличе KeyError, бо 4 немає у множині

# Використання discard()
my_set.discard(1) # my_set тепер {3}
my_set.discard(4) # 4 не існує, але помилки не буде, my_set залишається {3}


Method	Description
add()	Додає елемент до множини
clear()	Видаляє всі елементи з множини
copy()	Повертає копію набору
difference()	Повертає різницю двох або більше наборів як новий набір
difference_update()	Видаляє всі елементи іншої множини з цієї множини
discard()	Видаляє елемент з множини, якщо він є членом. (Нічого не робить, якщо елемент не входить до множини)
intersection()	Повертає перетин двох множин як нову множину
intersection_update()	Оновлює множину перетином себе та іншої
isdisjoint()	Повертає True, якщо два множини мають нульовий перетин
issubset()	Повертає True, якщо інший набір містить цей набір
issuperset()	Повертає True, якщо цей набір містить інший набір
pop()	Видаляє та повертає довільний елемент множини. Викликає, KeyError якщо множина порожня.
remove()	Видаляє елемент з множини. Якщо елемент не є членом, викликаєKeyError
symmetric_difference()	Повертає симетричну різницю двох множин як нову множину
symmetric_difference_update()	Оновлює множину симетричною різницею себе та іншої множини
union()	Повертає об'єднання множин у новій множині
update()	Оновлює набір об'єднанням себе та інших
'''
numbers.update({20, 1,2, 3,10, 2000}) # обєднує множину з іншою послідовністю
print(numbers)

new_set = numbers.union({8, 9, 11, 12}) # Повертає об'єднання множин у новій множині
print(new_set)

#4. Спеціальні методи
worker_1 = {'python', 'java', 'html css'} #множини А
worker_2 = {'kotlin', 'java', 'c++', 'c#'} #множини Б
print(worker_1.difference(worker_2)) # елементи множини А, яких немає у Б. Різниця між двома множинами A та B включає елементи множини A, яких немає на множині B.
print(worker_2.difference(worker_1)) # елементи множини Б, яких немає у А
#Ми використовуємо -оператор ` difference() ` для обчислення різниці між двома множинами.

print(worker_1.intersection(worker_2)) # використовуємо & оператор або метод intersection() для виконання операції встановлення перетину

print(worker_1.symmetric_difference(worker_2)) # Симетрична різниця між двома множинами A та B включає всі елементи A та B без спільних елементів.
#У Python ми використовуємо ^ оператор symmetric_difference() для виконання симетричного розрізнення двох множин

'''
# | Звідки ➡️ Куди     | Приклад                                       | Результат                              |
# | ------------------ | --------------------------------------------- | -------------------------------------- |
# | `int → float`      | `float(5)`                                    | `5.0`                                  |
# | `float → int`      | `int(3.9)`                                    | `3` (обрізає дробову частину)          |
# | `int → str`        | `str(42)`                                     | `'42'`                                 |
# | `str → int`        | `int("42")`                                   | `42`                                   |
# | `str → float`      | `float("3.14")`                               | `3.14`                                 |
# | `float → str`      | `str(2.5)`                                    | `'2.5'`                                |
# | `int/float → bool` | `bool(0)` → `False`<br>`bool(7)` → `True`     |                                        |
# | `str → bool`       | `bool("")` → `False`<br>`bool("hi")` → `True` |                                        |
# | `list → tuple`     | `tuple([1,2,3])`                              | `(1, 2, 3)`                            |
# | `tuple → list`     | `list((1,2,3))`                               | `[1, 2, 3]`                            |
# | `set → list`       | `list({1,2,3})`                               | `[1, 2, 3]` (порядок може змінюватись) |
# | `list → set`       | `set([1,2,2,3])`                              | `{1, 2, 3}` (дублікати зникають)       |
'''

#5. Перетворення
d = {'a': 1, 'b': 2, 'c': 3} # поверне тільки ключі при перетворенні словника в сет
print(set(d.items()))
print(set(d.keys()))
print(set(d.values()))

n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1 , 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list(set(n)))

print(set('Hello'))
print(list('Hello'))

#6. frozenset()

frozen = frozenset({1,2,3,4,5,6,7,8,9,10,10})
print(frozen) #  повертає незмінюваний об'єкт frozenset (кортеж для множини)